{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis\n",
    "\n",
    "The purpose of this notebook is to explore potential relationships and build an intuition about the distribution of curtailment events.  Naively, we are looking to find dimensions on which we might cluster or categorize different curtailment events, and to understand any seasonality or time dependence in the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import altair as alt\n",
    "\n",
    "from src.conf import settings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DataTransformerRegistry.enable('data_server')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Enable Altair to Serve data from disk since we expect to have at least 8760 rows or more\n",
    "# alt.data_transformers.enable('json')\n",
    "\n",
    "# Uncomment if using JupyterLab (see: https://github.com/altair-viz/altair/issues/1867)\n",
    "alt.data_transformers.enable(\"data_server\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ttu/.local/share/virtualenvs/CaReCur-b3qbtQ7S/lib/python3.7/site-packages/fastparquet/encoding.py:222: NumbaDeprecationWarning: \u001b[1mThe 'numba.jitclass' decorator has moved to 'numba.experimental.jitclass' to better reflect the experimental nature of the functionality. Please update your imports to accommodate this change and see http://numba.pydata.org/numba-doc/latest/reference/deprecation.html#change-of-jitclass-location for the time frame.\u001b[0m\n",
      "  Numpy8 = numba.jitclass(spec8)(NumpyIO)\n",
      "/home/ttu/.local/share/virtualenvs/CaReCur-b3qbtQ7S/lib/python3.7/site-packages/fastparquet/encoding.py:224: NumbaDeprecationWarning: \u001b[1mThe 'numba.jitclass' decorator has moved to 'numba.experimental.jitclass' to better reflect the experimental nature of the functionality. Please update your imports to accommodate this change and see http://numba.pydata.org/numba-doc/latest/reference/deprecation.html#change-of-jitclass-location for the time frame.\u001b[0m\n",
      "  Numpy32 = numba.jitclass(spec32)(NumpyIO)\n"
     ]
    }
   ],
   "source": [
    "df = pd.concat(\n",
    "    [\n",
    "        pd.read_parquet(fp_) for fp_ in settings.DATA_DIR.glob(\"processed/caiso/*.parquet\")\n",
    "    ]\n",
    ").tz_convert(tz=\"US/Pacific\")\n",
    "\n",
    "# Single Year for debugging\n",
    "\n",
    "# year = 2019\n",
    "# df = pd.read_parquet(settings.DATA_DIR / f\"processed/caiso/{year}.parquet\").tz_convert(tz=\"US/Pacific\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "column_map = zip(\n",
    "    df.columns.tolist(), \n",
    "    df.columns.str.replace(\"\\W+\", \"_\").str.lower().tolist()\n",
    ")\n",
    "\n",
    "df = df.rename(columns=dict(column_map))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Data Dictionary**\n",
    "\n",
    "- load (MW): Total demand across the CAISO for a given interval.\n",
    "- solar (MW): Average interval Solar production\n",
    "- wind (MW): Average interval Wind production\n",
    "- net_load (MW): Load - solar - wind\n",
    "- renewables (MW): Average interval production from solar, wind, biomass, biogas, geothermal and small hydropower\n",
    "- nuclear (MW): Average nuclear production\n",
    "- large_hydro (MW): Average large hydro production\n",
    "- imports (MW): Imports coming into the ISO; note that exports are NOT deducted from imports.\n",
    "- generation (MW): Total generation across all generator types\n",
    "- thermal (MW): non-nuclear and non-geothermal thermal production\n",
    "- load_less_generation_imports_ (MW): data validation column to ensure supply ~ demand\n",
    "- wind_curtailment (MW): Curtailed wind in a given interval\n",
    "- solar_curtailment (MW): Curtailed solar in a given interval\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>load</th>\n",
       "      <th>solar</th>\n",
       "      <th>wind</th>\n",
       "      <th>net_load</th>\n",
       "      <th>renewables</th>\n",
       "      <th>nuclear</th>\n",
       "      <th>large_hydro</th>\n",
       "      <th>imports</th>\n",
       "      <th>generation</th>\n",
       "      <th>thermal</th>\n",
       "      <th>load_less_generation_imports_</th>\n",
       "      <th>wind_curtailment</th>\n",
       "      <th>solar_curtailment</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-01 00:00:00-08:00</th>\n",
       "      <td>21552.671558</td>\n",
       "      <td>0.0</td>\n",
       "      <td>243.496014</td>\n",
       "      <td>21309.175544</td>\n",
       "      <td>2032.994475</td>\n",
       "      <td>2259.991374</td>\n",
       "      <td>2098.405092</td>\n",
       "      <td>7586.553984</td>\n",
       "      <td>13964.462727</td>\n",
       "      <td>7573.071786</td>\n",
       "      <td>1.654847</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01 00:05:00-08:00</th>\n",
       "      <td>21486.779943</td>\n",
       "      <td>0.0</td>\n",
       "      <td>238.499132</td>\n",
       "      <td>21248.280811</td>\n",
       "      <td>2026.481236</td>\n",
       "      <td>2259.952873</td>\n",
       "      <td>2143.557374</td>\n",
       "      <td>7543.249094</td>\n",
       "      <td>13944.799274</td>\n",
       "      <td>7514.807791</td>\n",
       "      <td>-1.268424</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01 00:10:00-08:00</th>\n",
       "      <td>21391.303108</td>\n",
       "      <td>0.0</td>\n",
       "      <td>227.229805</td>\n",
       "      <td>21164.073304</td>\n",
       "      <td>2014.528291</td>\n",
       "      <td>2259.809808</td>\n",
       "      <td>2130.224136</td>\n",
       "      <td>7666.711084</td>\n",
       "      <td>13727.433629</td>\n",
       "      <td>7322.871394</td>\n",
       "      <td>-2.841604</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01 00:15:00-08:00</th>\n",
       "      <td>21301.872170</td>\n",
       "      <td>0.0</td>\n",
       "      <td>228.026545</td>\n",
       "      <td>21073.845624</td>\n",
       "      <td>2016.257246</td>\n",
       "      <td>2259.802584</td>\n",
       "      <td>2093.382906</td>\n",
       "      <td>7701.705829</td>\n",
       "      <td>13598.816375</td>\n",
       "      <td>7229.373638</td>\n",
       "      <td>1.349966</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01 00:20:00-08:00</th>\n",
       "      <td>21242.270230</td>\n",
       "      <td>0.0</td>\n",
       "      <td>232.213448</td>\n",
       "      <td>21010.056782</td>\n",
       "      <td>2024.277588</td>\n",
       "      <td>2260.008342</td>\n",
       "      <td>2160.635742</td>\n",
       "      <td>7677.751619</td>\n",
       "      <td>13560.236628</td>\n",
       "      <td>7115.314955</td>\n",
       "      <td>4.281984</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   load  solar        wind      net_load  \\\n",
       "timestamp                                                                  \n",
       "2018-01-01 00:00:00-08:00  21552.671558    0.0  243.496014  21309.175544   \n",
       "2018-01-01 00:05:00-08:00  21486.779943    0.0  238.499132  21248.280811   \n",
       "2018-01-01 00:10:00-08:00  21391.303108    0.0  227.229805  21164.073304   \n",
       "2018-01-01 00:15:00-08:00  21301.872170    0.0  228.026545  21073.845624   \n",
       "2018-01-01 00:20:00-08:00  21242.270230    0.0  232.213448  21010.056782   \n",
       "\n",
       "                            renewables      nuclear  large_hydro      imports  \\\n",
       "timestamp                                                                       \n",
       "2018-01-01 00:00:00-08:00  2032.994475  2259.991374  2098.405092  7586.553984   \n",
       "2018-01-01 00:05:00-08:00  2026.481236  2259.952873  2143.557374  7543.249094   \n",
       "2018-01-01 00:10:00-08:00  2014.528291  2259.809808  2130.224136  7666.711084   \n",
       "2018-01-01 00:15:00-08:00  2016.257246  2259.802584  2093.382906  7701.705829   \n",
       "2018-01-01 00:20:00-08:00  2024.277588  2260.008342  2160.635742  7677.751619   \n",
       "\n",
       "                             generation      thermal  \\\n",
       "timestamp                                              \n",
       "2018-01-01 00:00:00-08:00  13964.462727  7573.071786   \n",
       "2018-01-01 00:05:00-08:00  13944.799274  7514.807791   \n",
       "2018-01-01 00:10:00-08:00  13727.433629  7322.871394   \n",
       "2018-01-01 00:15:00-08:00  13598.816375  7229.373638   \n",
       "2018-01-01 00:20:00-08:00  13560.236628  7115.314955   \n",
       "\n",
       "                           load_less_generation_imports_  wind_curtailment  \\\n",
       "timestamp                                                                    \n",
       "2018-01-01 00:00:00-08:00                       1.654847               NaN   \n",
       "2018-01-01 00:05:00-08:00                      -1.268424               NaN   \n",
       "2018-01-01 00:10:00-08:00                      -2.841604               NaN   \n",
       "2018-01-01 00:15:00-08:00                       1.349966               NaN   \n",
       "2018-01-01 00:20:00-08:00                       4.281984               NaN   \n",
       "\n",
       "                           solar_curtailment  \n",
       "timestamp                                     \n",
       "2018-01-01 00:00:00-08:00                NaN  \n",
       "2018-01-01 00:05:00-08:00                NaN  \n",
       "2018-01-01 00:10:00-08:00                NaN  \n",
       "2018-01-01 00:15:00-08:00                NaN  \n",
       "2018-01-01 00:20:00-08:00                NaN  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since our interval timeseries are not continuous and complete (i.e. significant irregular gaps exist across years), we must convert this to MWh to get additivity.\n",
    "All columns are in MW at 5 minute intervals. \n",
    "\n",
    "MWh are calculated by taking\n",
    "\n",
    "$MWh = MW  5[min]\\frac{1[hour]}{60[min]}$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>load</th>\n",
       "      <th>solar</th>\n",
       "      <th>wind</th>\n",
       "      <th>net_load</th>\n",
       "      <th>renewables</th>\n",
       "      <th>nuclear</th>\n",
       "      <th>large_hydro</th>\n",
       "      <th>imports</th>\n",
       "      <th>generation</th>\n",
       "      <th>thermal</th>\n",
       "      <th>load_less_generation_imports_</th>\n",
       "      <th>wind_curtailment</th>\n",
       "      <th>solar_curtailment</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-01 00:00:00-08:00</th>\n",
       "      <td>1796.055963</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.291334</td>\n",
       "      <td>1775.764629</td>\n",
       "      <td>169.416206</td>\n",
       "      <td>188.332615</td>\n",
       "      <td>174.867091</td>\n",
       "      <td>632.212832</td>\n",
       "      <td>1163.705227</td>\n",
       "      <td>631.089315</td>\n",
       "      <td>0.137904</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01 00:05:00-08:00</th>\n",
       "      <td>1790.564995</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.874928</td>\n",
       "      <td>1770.690068</td>\n",
       "      <td>168.873436</td>\n",
       "      <td>188.329406</td>\n",
       "      <td>178.629781</td>\n",
       "      <td>628.604091</td>\n",
       "      <td>1162.066606</td>\n",
       "      <td>626.233983</td>\n",
       "      <td>-0.105702</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01 00:10:00-08:00</th>\n",
       "      <td>1782.608592</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.935817</td>\n",
       "      <td>1763.672775</td>\n",
       "      <td>167.877358</td>\n",
       "      <td>188.317484</td>\n",
       "      <td>177.518678</td>\n",
       "      <td>638.892590</td>\n",
       "      <td>1143.952802</td>\n",
       "      <td>610.239283</td>\n",
       "      <td>-0.236800</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01 00:15:00-08:00</th>\n",
       "      <td>1775.156014</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.002212</td>\n",
       "      <td>1756.153802</td>\n",
       "      <td>168.021437</td>\n",
       "      <td>188.316882</td>\n",
       "      <td>174.448576</td>\n",
       "      <td>641.808819</td>\n",
       "      <td>1133.234698</td>\n",
       "      <td>602.447803</td>\n",
       "      <td>0.112497</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-01 00:20:00-08:00</th>\n",
       "      <td>1770.189186</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.351121</td>\n",
       "      <td>1750.838065</td>\n",
       "      <td>168.689799</td>\n",
       "      <td>188.334029</td>\n",
       "      <td>180.052978</td>\n",
       "      <td>639.812635</td>\n",
       "      <td>1130.019719</td>\n",
       "      <td>592.942913</td>\n",
       "      <td>0.356832</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  load  solar       wind     net_load  \\\n",
       "timestamp                                                               \n",
       "2018-01-01 00:00:00-08:00  1796.055963    0.0  20.291334  1775.764629   \n",
       "2018-01-01 00:05:00-08:00  1790.564995    0.0  19.874928  1770.690068   \n",
       "2018-01-01 00:10:00-08:00  1782.608592    0.0  18.935817  1763.672775   \n",
       "2018-01-01 00:15:00-08:00  1775.156014    0.0  19.002212  1756.153802   \n",
       "2018-01-01 00:20:00-08:00  1770.189186    0.0  19.351121  1750.838065   \n",
       "\n",
       "                           renewables     nuclear  large_hydro     imports  \\\n",
       "timestamp                                                                    \n",
       "2018-01-01 00:00:00-08:00  169.416206  188.332615   174.867091  632.212832   \n",
       "2018-01-01 00:05:00-08:00  168.873436  188.329406   178.629781  628.604091   \n",
       "2018-01-01 00:10:00-08:00  167.877358  188.317484   177.518678  638.892590   \n",
       "2018-01-01 00:15:00-08:00  168.021437  188.316882   174.448576  641.808819   \n",
       "2018-01-01 00:20:00-08:00  168.689799  188.334029   180.052978  639.812635   \n",
       "\n",
       "                            generation     thermal  \\\n",
       "timestamp                                            \n",
       "2018-01-01 00:00:00-08:00  1163.705227  631.089315   \n",
       "2018-01-01 00:05:00-08:00  1162.066606  626.233983   \n",
       "2018-01-01 00:10:00-08:00  1143.952802  610.239283   \n",
       "2018-01-01 00:15:00-08:00  1133.234698  602.447803   \n",
       "2018-01-01 00:20:00-08:00  1130.019719  592.942913   \n",
       "\n",
       "                           load_less_generation_imports_  wind_curtailment  \\\n",
       "timestamp                                                                    \n",
       "2018-01-01 00:00:00-08:00                       0.137904               NaN   \n",
       "2018-01-01 00:05:00-08:00                      -0.105702               NaN   \n",
       "2018-01-01 00:10:00-08:00                      -0.236800               NaN   \n",
       "2018-01-01 00:15:00-08:00                       0.112497               NaN   \n",
       "2018-01-01 00:20:00-08:00                       0.356832               NaN   \n",
       "\n",
       "                           solar_curtailment  \n",
       "timestamp                                     \n",
       "2018-01-01 00:00:00-08:00                NaN  \n",
       "2018-01-01 00:05:00-08:00                NaN  \n",
       "2018-01-01 00:10:00-08:00                NaN  \n",
       "2018-01-01 00:15:00-08:00                NaN  \n",
       "2018-01-01 00:20:00-08:00                NaN  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_mwh = df * (5/60.)\n",
    "df_mwh.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We roll up our data to an hourly basis to remove effects from sub-hourly markets and highly localized or temporal weather events."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Roll up to hourly 8760 by year\n",
    "hourly_mwh = df_mwh.groupby(\n",
    "    by=pd.Grouper(freq=\"H\")\n",
    ")[[\"solar_curtailment\", \"solar\", \"net_load\", \"load\", \"generation\", \"renewables\", \"wind_curtailment\"]].sum()\n",
    "\n",
    "# Calculate some other potentially interesting metrics\n",
    "\n",
    "# How much of our load in a given hour was fulfilled by solar generation?\n",
    "hourly_mwh[\"pct_solar\"] = hourly_mwh[\"solar\"]/hourly_mwh[\"generation\"]\n",
    "\n",
    "# How much curtailment is occurring for each unit of raw solar generation?\n",
    "hourly_mwh[\"curtailment_intensity\"] = (hourly_mwh[\"solar_curtailment\"].fillna(0)/hourly_mwh[\"solar\"]).fillna(0)\n",
    "\n",
    "# Calculate Pct of Total Solar Potential\n",
    "hourly_mwh[\"pct_solar_potential\"] = (hourly_mwh[\"solar_curtailment\"]/(hourly_mwh[\"solar\"] + hourly_mwh[\"solar_curtailment\"])).fillna(0)\n",
    "\n",
    "# Calculate Pct of Total Renewable Potential\n",
    "hourly_mwh[\"pct_renewable_potential\"] = (hourly_mwh[\"solar_curtailment\"]/(\n",
    "    hourly_mwh[\"renewables\"] + hourly_mwh[\"solar_curtailment\"] + hourly_mwh[\"wind_curtailment\"])\n",
    ").fillna(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For convenience, we define a subset of data with some non-zero amount of curtailment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "curtailment_days = hourly_mwh.query(\"solar_curtailment > 0\").reset_index()\n",
    "curtailment_days = pd.concat(\n",
    "    [_dat.sort_values(\"solar_curtailment\", ascending=False).reset_index(drop=True).reset_index() for (grp, _dat) in curtailment_days.groupby(by=curtailment_days[\"timestamp\"].dt.year)],\n",
    "    ignore_index=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Due to correlation between nearby hours, we are also interested in a daily totals."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "daily_curtailment = curtailment_days.groupby(\n",
    "    by=pd.Grouper(key=\"timestamp\", freq=\"D\")\n",
    ")[[\"solar\", \"solar_curtailment\", \"net_load\", \"load\", \"generation\", \"renewables\", \"wind_curtailment\"]].sum()\n",
    "daily_curtailment[\"curtailment_intensity\"] = daily_curtailment.eval(\"solar_curtailment/solar\")\n",
    "daily_curtailment.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploration: How much annual Curtailment is there?\n",
    "\n",
    "We are primarily interested in finding explanatory variables for curtailment.  We are interested specifically in time dependence at the hour-scale.  The goal of this study is to identify exogenous data sets which could explain a given curtailment day."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Chart Definitions**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Interactive version to Drill Down Over Fixed Time periods\n",
    "brush = alt.selection(type='interval', encodings=['x'])\n",
    "\n",
    "base = alt.Chart(\n",
    "    hourly_mwh.reset_index()\n",
    ").mark_rect().encode(\n",
    "    alt.Y(\"hours(timestamp):T\", title=\"Hour of Day\", sort=\"descending\"), \n",
    "    alt.X(\"yearmonthdate(timestamp):T\", title=\"Date\", sort=\"ascending\"),\n",
    "    alt.Color(\n",
    "        alt.repeat(\"row\"), \n",
    "        type=\"quantitative\", \n",
    "        sort=\"descending\", \n",
    "        scale=alt.Scale(scheme=\"redgrey\"),\n",
    "        legend=alt.Legend(orient=\"top\")\n",
    "    )\n",
    ").properties(\n",
    "    width=1500,\n",
    "    height=250\n",
    ")\n",
    "\n",
    "background = base.encode(\n",
    "    color=alt.value('#ddd')\n",
    ").add_selection(brush)\n",
    "\n",
    "highlight = base.transform_filter(brush)\n",
    "\n",
    "brush_chart = alt.layer(\n",
    "    background,\n",
    "    highlight\n",
    ").repeat(\n",
    "    row=[\"solar_curtailment\", \"solar\", \"curtailment_intensity\"]\n",
    ").resolve_scale(color=\"independent\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "# A better version of the chart above with units and things but not interactive\n",
    "\n",
    "basechart = alt.Chart(\n",
    "    hourly_mwh.reset_index()\n",
    ").mark_rect().encode(\n",
    "    alt.Y(\"hours(timestamp):T\", title=\"Hour of Day\", sort=\"descending\"), \n",
    "    alt.X(\"yearmonthdate(timestamp):T\", title=\"Date\", sort=\"ascending\"),\n",
    ").properties(\n",
    "    width=1500,\n",
    "    height=250\n",
    ")\n",
    "\n",
    "fixed_chart = alt.vconcat(\n",
    "    basechart.encode(\n",
    "        alt.Color(\n",
    "            \"solar_curtailment:Q\", \n",
    "              scale=alt.Scale(type=\"pow\", exponent=1/4, scheme=\"redgrey\"), \n",
    "              sort=\"descending\",\n",
    "              title=\"Solar Curtailment (MWh)\",\n",
    "              legend=alt.Legend(orient=\"top\"),\n",
    "         )\n",
    "    ),\n",
    "    basechart.encode(\n",
    "        alt.Color(\n",
    "            \"solar:Q\", \n",
    "              scale=alt.Scale(type=\"pow\", exponent=2, scheme=\"redgrey\"),\n",
    "              sort=\"descending\",\n",
    "              title=\"Solar Output (MW)\",\n",
    "              legend=alt.Legend(orient=\"top\"),\n",
    "        )\n",
    "    ),\n",
    "    basechart.encode(\n",
    "        alt.Color(\n",
    "            \"curtailment_intensity:Q\", \n",
    "            scale=alt.Scale(scheme=\"redgrey\", type=\"pow\", exponent=1/4, domain=[0,1]), \n",
    "            sort=\"descending\", \n",
    "            title=\"MWh Cur. per MWh Load\",\n",
    "            legend=alt.Legend(orient=\"top\"),\n",
    "        )\n",
    "    )\n",
    ").resolve_scale(color=\"independent\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's inspect our curtailed hours a bit more closely\n",
    "load_chart = alt.Chart(curtailment_days).mark_line().encode(\n",
    "    alt.X(\"index\", title=\"rank\"),\n",
    "    alt.Y(\"solar_curtailment\", title=\"Solar Curtailment (MW)\"),\n",
    ").facet(\"year(timestamp):N\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "curtail_v_solar_production = alt.Chart(curtailment_days).mark_point().encode(\n",
    "    alt.X(\"solar\", title=\"Solar Production\"),\n",
    "    alt.Y(\"solar_curtailment\", title=\"Solar Curtailment (MW)\"),\n",
    "    alt.Color(\"month(timestamp):N\", scale=alt.Scale(scheme=\"tableau20\")),\n",
    "    alt.Facet(\"year(timestamp):O\", columns=3)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "base = alt.Chart().mark_point().encode(\n",
    "    alt.X(\"monthdate(timestamp):T\", title=\"Date (hour)\"),\n",
    "    alt.Y(\"curtailment_intensity\", title=\"Curtailment Intensity (MW/MW)\"),\n",
    "    alt.Color(\"load:Q\", scale=alt.Scale(scheme=\"redyellowblue\"), sort=\"descending\", title=\"Load (MW)\"),\n",
    "    # alt.Facet(\"year(timestamp):O\", columns=3)\n",
    ")\n",
    "\n",
    "curtailment_intensity = alt.layer(base, data=curtailment_days.query(\"curtailment_intensity < 1\")).facet(\"year(timestamp):O\")\n",
    "daily_curtailment_intensity = alt.layer(base, data=daily_curtailment).facet(\"year(timestamp):O\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "daily_curtailment_vs_load = alt.Chart(daily_curtailment).mark_point().encode(\n",
    "    alt.X(\"load\", title=\"Load (MWh)\"),\n",
    "    alt.Y(\"solar_curtailment\", title=\"Daily Solar Curtailment (MWh)\"),\n",
    "    alt.Color(\"month(timestamp):N\", scale=alt.Scale(scheme=\"tableau20\")),\n",
    "    alt.Facet(\"year(timestamp):O\"),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Curtailment Characteristics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<div id=\"altair-viz-9cfae4d59ce144d39dfdbfe35d9adcfe\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "  (function(spec, embedOpt){\n",
       "    let outputDiv = document.currentScript.previousElementSibling;\n",
       "    if (outputDiv.id !== \"altair-viz-9cfae4d59ce144d39dfdbfe35d9adcfe\") {\n",
       "      outputDiv = document.getElementById(\"altair-viz-9cfae4d59ce144d39dfdbfe35d9adcfe\");\n",
       "    }\n",
       "    const paths = {\n",
       "      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n",
       "      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n",
       "      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n",
       "      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n",
       "    };\n",
       "\n",
       "    function loadScript(lib) {\n",
       "      return new Promise(function(resolve, reject) {\n",
       "        var s = document.createElement('script');\n",
       "        s.src = paths[lib];\n",
       "        s.async = true;\n",
       "        s.onload = () => resolve(paths[lib]);\n",
       "        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n",
       "        document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "      });\n",
       "    }\n",
       "\n",
       "    function showError(err) {\n",
       "      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n",
       "      throw err;\n",
       "    }\n",
       "\n",
       "    function displayChart(vegaEmbed) {\n",
       "      vegaEmbed(outputDiv, spec, embedOpt)\n",
       "        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n",
       "    }\n",
       "\n",
       "    if(typeof define === \"function\" && define.amd) {\n",
       "      requirejs.config({paths});\n",
       "      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n",
       "    } else if (typeof vegaEmbed === \"function\") {\n",
       "      displayChart(vegaEmbed);\n",
       "    } else {\n",
       "      loadScript(\"vega\")\n",
       "        .then(() => loadScript(\"vega-lite\"))\n",
       "        .then(() => loadScript(\"vega-embed\"))\n",
       "        .catch(showError)\n",
       "        .then(() => displayChart(vegaEmbed));\n",
       "    }\n",
       "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"url\": \"http://localhost:15533/9626a23229823ccf8aa1fb8154a92332.json\"}, \"mark\": \"bar\", \"encoding\": {\"x\": {\"type\": \"temporal\", \"field\": \"timestamp\", \"timeUnit\": \"yearmonth\", \"title\": \"Month\"}, \"y\": {\"type\": \"quantitative\", \"aggregate\": \"mean\", \"field\": \"solar_curtailment\", \"title\": \"Mean Curtailment (MWh)\"}}, \"selection\": {\"selector002\": {\"type\": \"interval\", \"bind\": \"scales\", \"encodings\": [\"x\", \"y\"]}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\"}, {\"mode\": \"vega-lite\"});\n",
       "</script>"
      ],
      "text/plain": [
       "alt.Chart(...)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alt.Chart(daily_curtailment).mark_bar().encode(\n",
    "    alt.X(\"yearmonth(timestamp):T\", title=\"Month\"),\n",
    "    alt.Y(\"mean(solar_curtailment)\", title=\"Mean Curtailment (MWh)\")\n",
    ").interactive()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<div id=\"altair-viz-0c06084ef4f146cbbe14268d7f033530\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "  (function(spec, embedOpt){\n",
       "    let outputDiv = document.currentScript.previousElementSibling;\n",
       "    if (outputDiv.id !== \"altair-viz-0c06084ef4f146cbbe14268d7f033530\") {\n",
       "      outputDiv = document.getElementById(\"altair-viz-0c06084ef4f146cbbe14268d7f033530\");\n",
       "    }\n",
       "    const paths = {\n",
       "      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n",
       "      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n",
       "      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n",
       "      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n",
       "    };\n",
       "\n",
       "    function loadScript(lib) {\n",
       "      return new Promise(function(resolve, reject) {\n",
       "        var s = document.createElement('script');\n",
       "        s.src = paths[lib];\n",
       "        s.async = true;\n",
       "        s.onload = () => resolve(paths[lib]);\n",
       "        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n",
       "        document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "      });\n",
       "    }\n",
       "\n",
       "    function showError(err) {\n",
       "      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n",
       "      throw err;\n",
       "    }\n",
       "\n",
       "    function displayChart(vegaEmbed) {\n",
       "      vegaEmbed(outputDiv, spec, embedOpt)\n",
       "        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n",
       "    }\n",
       "\n",
       "    if(typeof define === \"function\" && define.amd) {\n",
       "      requirejs.config({paths});\n",
       "      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n",
       "    } else if (typeof vegaEmbed === \"function\") {\n",
       "      displayChart(vegaEmbed);\n",
       "    } else {\n",
       "      loadScript(\"vega\")\n",
       "        .then(() => loadScript(\"vega-lite\"))\n",
       "        .then(() => loadScript(\"vega-embed\"))\n",
       "        .catch(showError)\n",
       "        .then(() => displayChart(vegaEmbed));\n",
       "    }\n",
       "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"vconcat\": [{\"mark\": \"rect\", \"encoding\": {\"color\": {\"type\": \"quantitative\", \"field\": \"solar_curtailment\", \"legend\": {\"orient\": \"top\"}, \"scale\": {\"exponent\": 0.25, \"scheme\": \"redgrey\", \"type\": \"pow\"}, \"sort\": \"descending\", \"title\": \"Solar Curtailment (MWh)\"}, \"x\": {\"type\": \"temporal\", \"field\": \"timestamp\", \"sort\": \"ascending\", \"timeUnit\": \"yearmonthdate\", \"title\": \"Date\"}, \"y\": {\"type\": \"temporal\", \"field\": \"timestamp\", \"sort\": \"descending\", \"timeUnit\": \"hours\", \"title\": \"Hour of Day\"}}, \"height\": 250, \"width\": 1500}, {\"mark\": \"rect\", \"encoding\": {\"color\": {\"type\": \"quantitative\", \"field\": \"solar\", \"legend\": {\"orient\": \"top\"}, \"scale\": {\"exponent\": 2, \"scheme\": \"redgrey\", \"type\": \"pow\"}, \"sort\": \"descending\", \"title\": \"Solar Output (MW)\"}, \"x\": {\"type\": \"temporal\", \"field\": \"timestamp\", \"sort\": \"ascending\", \"timeUnit\": \"yearmonthdate\", \"title\": \"Date\"}, \"y\": {\"type\": \"temporal\", \"field\": \"timestamp\", \"sort\": \"descending\", \"timeUnit\": \"hours\", \"title\": \"Hour of Day\"}}, \"height\": 250, \"width\": 1500}, {\"mark\": \"rect\", \"encoding\": {\"color\": {\"type\": \"quantitative\", \"field\": \"curtailment_intensity\", \"legend\": {\"orient\": \"top\"}, \"scale\": {\"domain\": [0, 1], \"exponent\": 0.25, \"scheme\": \"redgrey\", \"type\": \"pow\"}, \"sort\": \"descending\", \"title\": \"MWh Cur. per MWh Load\"}, \"x\": {\"type\": \"temporal\", \"field\": \"timestamp\", \"sort\": \"ascending\", \"timeUnit\": \"yearmonthdate\", \"title\": \"Date\"}, \"y\": {\"type\": \"temporal\", \"field\": \"timestamp\", \"sort\": \"descending\", \"timeUnit\": \"hours\", \"title\": \"Hour of Day\"}}, \"height\": 250, \"width\": 1500}], \"data\": {\"url\": \"http://localhost:15533/8767f94f57bc68fc2bcb426e8cdfb60c.json\"}, \"resolve\": {\"scale\": {\"color\": \"independent\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\"}, {\"mode\": \"vega-lite\"});\n",
       "</script>"
      ],
      "text/plain": [
       "alt.VConcatChart(...)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fixed_chart"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Shown above are\n",
    "\n",
    "- Hourly Solar curtailment in $x^{.25}$ scale to exaggerate visual differences in curtailment scale.\n",
    "- Hourly Solar Output (MW) in $x^{2}$ scale. \n",
    "- Hourly Curtailment \"Intensity\" w.r.t. Load (MW) in $x^{.25}$ scale. \n",
    "\n",
    "By visual inspection, two large curtailment \"zones\" or \"clusters\" appear to exist -- one centered around mid-March, and the other around mid-October.  Another prominent feature is the fast adoption of solar over time. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<div id=\"altair-viz-ed9e4c796fed436abd6cd34b1f3b5fc2\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "  (function(spec, embedOpt){\n",
       "    let outputDiv = document.currentScript.previousElementSibling;\n",
       "    if (outputDiv.id !== \"altair-viz-ed9e4c796fed436abd6cd34b1f3b5fc2\") {\n",
       "      outputDiv = document.getElementById(\"altair-viz-ed9e4c796fed436abd6cd34b1f3b5fc2\");\n",
       "    }\n",
       "    const paths = {\n",
       "      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n",
       "      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n",
       "      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n",
       "      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n",
       "    };\n",
       "\n",
       "    function loadScript(lib) {\n",
       "      return new Promise(function(resolve, reject) {\n",
       "        var s = document.createElement('script');\n",
       "        s.src = paths[lib];\n",
       "        s.async = true;\n",
       "        s.onload = () => resolve(paths[lib]);\n",
       "        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n",
       "        document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "      });\n",
       "    }\n",
       "\n",
       "    function showError(err) {\n",
       "      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n",
       "      throw err;\n",
       "    }\n",
       "\n",
       "    function displayChart(vegaEmbed) {\n",
       "      vegaEmbed(outputDiv, spec, embedOpt)\n",
       "        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n",
       "    }\n",
       "\n",
       "    if(typeof define === \"function\" && define.amd) {\n",
       "      requirejs.config({paths});\n",
       "      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n",
       "    } else if (typeof vegaEmbed === \"function\") {\n",
       "      displayChart(vegaEmbed);\n",
       "    } else {\n",
       "      loadScript(\"vega\")\n",
       "        .then(() => loadScript(\"vega-lite\"))\n",
       "        .then(() => loadScript(\"vega-embed\"))\n",
       "        .catch(showError)\n",
       "        .then(() => displayChart(vegaEmbed));\n",
       "    }\n",
       "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"url\": \"http://localhost:15533/9626a23229823ccf8aa1fb8154a92332.json\"}, \"mark\": \"point\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"timestamp\", \"scale\": {\"scheme\": \"tableau20\"}, \"timeUnit\": \"month\"}, \"facet\": {\"type\": \"ordinal\", \"field\": \"timestamp\", \"timeUnit\": \"year\"}, \"x\": {\"type\": \"quantitative\", \"field\": \"load\", \"title\": \"Load (MWh)\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"solar_curtailment\", \"title\": \"Daily Solar Curtailment (MWh)\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\"}, {\"mode\": \"vega-lite\"});\n",
       "</script>"
      ],
      "text/plain": [
       "alt.Chart(...)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "daily_curtailment_vs_load"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By inspection, we can see a very rough pattern of high curtailment events during periods of \"medium\" load.  Intuitively, we might imagine these correspond to days with very high solar production, and very low demand (e.g. sunny in the desert, and temperate in populated centers.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<div id=\"altair-viz-2a5f4a8928a641c293053a51230c6b51\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "  (function(spec, embedOpt){\n",
       "    let outputDiv = document.currentScript.previousElementSibling;\n",
       "    if (outputDiv.id !== \"altair-viz-2a5f4a8928a641c293053a51230c6b51\") {\n",
       "      outputDiv = document.getElementById(\"altair-viz-2a5f4a8928a641c293053a51230c6b51\");\n",
       "    }\n",
       "    const paths = {\n",
       "      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n",
       "      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n",
       "      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n",
       "      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n",
       "    };\n",
       "\n",
       "    function loadScript(lib) {\n",
       "      return new Promise(function(resolve, reject) {\n",
       "        var s = document.createElement('script');\n",
       "        s.src = paths[lib];\n",
       "        s.async = true;\n",
       "        s.onload = () => resolve(paths[lib]);\n",
       "        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n",
       "        document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "      });\n",
       "    }\n",
       "\n",
       "    function showError(err) {\n",
       "      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n",
       "      throw err;\n",
       "    }\n",
       "\n",
       "    function displayChart(vegaEmbed) {\n",
       "      vegaEmbed(outputDiv, spec, embedOpt)\n",
       "        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n",
       "    }\n",
       "\n",
       "    if(typeof define === \"function\" && define.amd) {\n",
       "      requirejs.config({paths});\n",
       "      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n",
       "    } else if (typeof vegaEmbed === \"function\") {\n",
       "      displayChart(vegaEmbed);\n",
       "    } else {\n",
       "      loadScript(\"vega\")\n",
       "        .then(() => loadScript(\"vega-lite\"))\n",
       "        .then(() => loadScript(\"vega-embed\"))\n",
       "        .catch(showError)\n",
       "        .then(() => displayChart(vegaEmbed));\n",
       "    }\n",
       "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"url\": \"http://localhost:15533/aa76323a2337d21c7fe93fe2ec9b40f4.json\"}, \"facet\": {\"type\": \"nominal\", \"field\": \"timestamp\", \"timeUnit\": \"year\"}, \"spec\": {\"mark\": \"line\", \"encoding\": {\"x\": {\"type\": \"quantitative\", \"field\": \"index\", \"title\": \"rank\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"solar_curtailment\", \"title\": \"Solar Curtailment (MW)\"}}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\"}, {\"mode\": \"vega-lite\"});\n",
       "</script>"
      ],
      "text/plain": [
       "alt.FacetChart(...)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "load_chart"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hourly curtailment by year in MW - Over time, the available curtailed capacity has increased drastically (by a factor of 3 from 2016 to 2019)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<div id=\"altair-viz-1b9ab9b5904d4221a2cc9cdb7c01521d\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "  (function(spec, embedOpt){\n",
       "    let outputDiv = document.currentScript.previousElementSibling;\n",
       "    if (outputDiv.id !== \"altair-viz-1b9ab9b5904d4221a2cc9cdb7c01521d\") {\n",
       "      outputDiv = document.getElementById(\"altair-viz-1b9ab9b5904d4221a2cc9cdb7c01521d\");\n",
       "    }\n",
       "    const paths = {\n",
       "      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n",
       "      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n",
       "      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n",
       "      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n",
       "    };\n",
       "\n",
       "    function loadScript(lib) {\n",
       "      return new Promise(function(resolve, reject) {\n",
       "        var s = document.createElement('script');\n",
       "        s.src = paths[lib];\n",
       "        s.async = true;\n",
       "        s.onload = () => resolve(paths[lib]);\n",
       "        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n",
       "        document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "      });\n",
       "    }\n",
       "\n",
       "    function showError(err) {\n",
       "      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n",
       "      throw err;\n",
       "    }\n",
       "\n",
       "    function displayChart(vegaEmbed) {\n",
       "      vegaEmbed(outputDiv, spec, embedOpt)\n",
       "        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n",
       "    }\n",
       "\n",
       "    if(typeof define === \"function\" && define.amd) {\n",
       "      requirejs.config({paths});\n",
       "      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n",
       "    } else if (typeof vegaEmbed === \"function\") {\n",
       "      displayChart(vegaEmbed);\n",
       "    } else {\n",
       "      loadScript(\"vega\")\n",
       "        .then(() => loadScript(\"vega-lite\"))\n",
       "        .then(() => loadScript(\"vega-embed\"))\n",
       "        .catch(showError)\n",
       "        .then(() => displayChart(vegaEmbed));\n",
       "    }\n",
       "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"url\": \"http://localhost:15533/aa76323a2337d21c7fe93fe2ec9b40f4.json\"}, \"mark\": \"point\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"timestamp\", \"scale\": {\"scheme\": \"tableau20\"}, \"timeUnit\": \"month\"}, \"facet\": {\"type\": \"ordinal\", \"columns\": 3, \"field\": \"timestamp\", \"timeUnit\": \"year\"}, \"x\": {\"type\": \"quantitative\", \"field\": \"solar\", \"title\": \"Solar Production\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"solar_curtailment\", \"title\": \"Solar Curtailment (MW)\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\"}, {\"mode\": \"vega-lite\"});\n",
       "</script>"
      ],
      "text/plain": [
       "alt.Chart(...)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "curtail_v_solar_production"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One metric of interest may be the amount of solar curtailment per unit of solar production.  Each mark represents a single hour in a year.  By visual inspection, a vague envelope is visible on the right hand side.  The sum of curtailment and production might represent the total solar capacity in a given hour.  By inspection, we can also observe a larger portion of curtailment is occurring year on year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<div id=\"altair-viz-348f8817d7b44642a1068c8e4cfe538b\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "  (function(spec, embedOpt){\n",
       "    let outputDiv = document.currentScript.previousElementSibling;\n",
       "    if (outputDiv.id !== \"altair-viz-348f8817d7b44642a1068c8e4cfe538b\") {\n",
       "      outputDiv = document.getElementById(\"altair-viz-348f8817d7b44642a1068c8e4cfe538b\");\n",
       "    }\n",
       "    const paths = {\n",
       "      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n",
       "      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n",
       "      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n",
       "      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n",
       "    };\n",
       "\n",
       "    function loadScript(lib) {\n",
       "      return new Promise(function(resolve, reject) {\n",
       "        var s = document.createElement('script');\n",
       "        s.src = paths[lib];\n",
       "        s.async = true;\n",
       "        s.onload = () => resolve(paths[lib]);\n",
       "        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n",
       "        document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "      });\n",
       "    }\n",
       "\n",
       "    function showError(err) {\n",
       "      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n",
       "      throw err;\n",
       "    }\n",
       "\n",
       "    function displayChart(vegaEmbed) {\n",
       "      vegaEmbed(outputDiv, spec, embedOpt)\n",
       "        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n",
       "    }\n",
       "\n",
       "    if(typeof define === \"function\" && define.amd) {\n",
       "      requirejs.config({paths});\n",
       "      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n",
       "    } else if (typeof vegaEmbed === \"function\") {\n",
       "      displayChart(vegaEmbed);\n",
       "    } else {\n",
       "      loadScript(\"vega\")\n",
       "        .then(() => loadScript(\"vega-lite\"))\n",
       "        .then(() => loadScript(\"vega-embed\"))\n",
       "        .catch(showError)\n",
       "        .then(() => displayChart(vegaEmbed));\n",
       "    }\n",
       "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"url\": \"http://localhost:15533/8e812fa5c1a3c9b1ee4384d7578b869b.json\"}, \"facet\": {\"type\": \"ordinal\", \"field\": \"timestamp\", \"timeUnit\": \"year\"}, \"spec\": {\"layer\": [{\"mark\": \"point\", \"encoding\": {\"color\": {\"type\": \"quantitative\", \"field\": \"load\", \"scale\": {\"scheme\": \"redyellowblue\"}, \"sort\": \"descending\", \"title\": \"Load (MW)\"}, \"x\": {\"type\": \"temporal\", \"field\": \"timestamp\", \"timeUnit\": \"monthdate\", \"title\": \"Date (hour)\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"curtailment_intensity\", \"title\": \"Curtailment Intensity (MW/MW)\"}}}]}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\"}, {\"mode\": \"vega-lite\"});\n",
       "</script>"
      ],
      "text/plain": [
       "alt.FacetChart(...)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "curtailment_intensity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hourly curtailment per unit of solar production.  A value of 1 represents an hour where 50% of solar capacity is curtailed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<div id=\"altair-viz-ca35df7fe6a14239aab44ed291f457db\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "  (function(spec, embedOpt){\n",
       "    let outputDiv = document.currentScript.previousElementSibling;\n",
       "    if (outputDiv.id !== \"altair-viz-ca35df7fe6a14239aab44ed291f457db\") {\n",
       "      outputDiv = document.getElementById(\"altair-viz-ca35df7fe6a14239aab44ed291f457db\");\n",
       "    }\n",
       "    const paths = {\n",
       "      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n",
       "      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n",
       "      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n",
       "      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n",
       "    };\n",
       "\n",
       "    function loadScript(lib) {\n",
       "      return new Promise(function(resolve, reject) {\n",
       "        var s = document.createElement('script');\n",
       "        s.src = paths[lib];\n",
       "        s.async = true;\n",
       "        s.onload = () => resolve(paths[lib]);\n",
       "        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n",
       "        document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "      });\n",
       "    }\n",
       "\n",
       "    function showError(err) {\n",
       "      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n",
       "      throw err;\n",
       "    }\n",
       "\n",
       "    function displayChart(vegaEmbed) {\n",
       "      vegaEmbed(outputDiv, spec, embedOpt)\n",
       "        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n",
       "    }\n",
       "\n",
       "    if(typeof define === \"function\" && define.amd) {\n",
       "      requirejs.config({paths});\n",
       "      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n",
       "    } else if (typeof vegaEmbed === \"function\") {\n",
       "      displayChart(vegaEmbed);\n",
       "    } else {\n",
       "      loadScript(\"vega\")\n",
       "        .then(() => loadScript(\"vega-lite\"))\n",
       "        .then(() => loadScript(\"vega-embed\"))\n",
       "        .catch(showError)\n",
       "        .then(() => displayChart(vegaEmbed));\n",
       "    }\n",
       "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"url\": \"http://localhost:15533/9626a23229823ccf8aa1fb8154a92332.json\"}, \"facet\": {\"type\": \"ordinal\", \"field\": \"timestamp\", \"timeUnit\": \"year\"}, \"spec\": {\"layer\": [{\"mark\": \"point\", \"encoding\": {\"color\": {\"type\": \"quantitative\", \"field\": \"load\", \"scale\": {\"scheme\": \"redyellowblue\"}, \"sort\": \"descending\", \"title\": \"Load (MW)\"}, \"x\": {\"type\": \"temporal\", \"field\": \"timestamp\", \"timeUnit\": \"monthdate\", \"title\": \"Date (hour)\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"curtailment_intensity\", \"title\": \"Curtailment Intensity (MW/MW)\"}}}]}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\"}, {\"mode\": \"vega-lite\"});\n",
       "</script>"
      ],
      "text/plain": [
       "alt.FacetChart(...)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "daily_curtailment_intensity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Total daily curtailment per unit of solar production.  A value of 1 represents a day where 50% of solar capacity is curtailed.  "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "carecur",
   "language": "python",
   "name": "carecur"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
