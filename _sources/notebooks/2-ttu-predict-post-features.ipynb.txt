{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The input of this notebook is a dataset that has already been "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "import statsmodels.formula.api as smf\n",
    "import statsmodels.api as sm\n",
    "\n",
    "from src.conf import settings\n",
    "\n",
    "TRAINING_DIR = settings.DATA_DIR / \"processed/training/\"\n",
    "\n",
    "data = pd.read_parquet(TRAINING_DIR / \"0_labeled_data.parquet\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>is_weekday</th>\n",
       "      <th>t</th>\n",
       "      <th>dswrf</th>\n",
       "      <th>SUNSD</th>\n",
       "      <th>curtailment_event</th>\n",
       "      <th>solar_curtailment</th>\n",
       "      <th>load</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-02-01 00:00:00-08:00</td>\n",
       "      <td>False</td>\n",
       "      <td>282.630219</td>\n",
       "      <td>204.382217</td>\n",
       "      <td>2130985.0</td>\n",
       "      <td>False</td>\n",
       "      <td>8480.663464</td>\n",
       "      <td>7.404797e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-02-02 00:00:00-08:00</td>\n",
       "      <td>False</td>\n",
       "      <td>282.440430</td>\n",
       "      <td>155.364441</td>\n",
       "      <td>1721099.0</td>\n",
       "      <td>False</td>\n",
       "      <td>288.956667</td>\n",
       "      <td>7.367050e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-02-03 00:00:00-08:00</td>\n",
       "      <td>False</td>\n",
       "      <td>283.654236</td>\n",
       "      <td>162.995560</td>\n",
       "      <td>1762346.0</td>\n",
       "      <td>False</td>\n",
       "      <td>869.203799</td>\n",
       "      <td>7.272859e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-02-04 00:00:00-08:00</td>\n",
       "      <td>True</td>\n",
       "      <td>283.166656</td>\n",
       "      <td>197.639999</td>\n",
       "      <td>1947685.0</td>\n",
       "      <td>True</td>\n",
       "      <td>69858.576657</td>\n",
       "      <td>6.611103e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-02-05 00:00:00-08:00</td>\n",
       "      <td>True</td>\n",
       "      <td>283.199097</td>\n",
       "      <td>174.813339</td>\n",
       "      <td>2019408.0</td>\n",
       "      <td>False</td>\n",
       "      <td>25.348000</td>\n",
       "      <td>6.661248e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      timestamp  is_weekday           t       dswrf  \\\n",
       "index                                                                 \n",
       "0     2017-02-01 00:00:00-08:00       False  282.630219  204.382217   \n",
       "1     2017-02-02 00:00:00-08:00       False  282.440430  155.364441   \n",
       "2     2017-02-03 00:00:00-08:00       False  283.654236  162.995560   \n",
       "3     2017-02-04 00:00:00-08:00        True  283.166656  197.639999   \n",
       "4     2017-02-05 00:00:00-08:00        True  283.199097  174.813339   \n",
       "\n",
       "           SUNSD  curtailment_event  solar_curtailment          load  \n",
       "index                                                                 \n",
       "0      2130985.0              False        8480.663464  7.404797e+06  \n",
       "1      1721099.0              False         288.956667  7.367050e+06  \n",
       "2      1762346.0              False         869.203799  7.272859e+06  \n",
       "3      1947685.0               True       69858.576657  6.611103e+06  \n",
       "4      2019408.0              False          25.348000  6.661248e+06  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ModelRun:\n",
    "    \n",
    "    def __init__(self, formula, data, threshold=.8):\n",
    "        data = data.copy()\n",
    "        self.formula = formula\n",
    "        self.threshold = threshold\n",
    "        self.test = data.sample(int(len(data)*.2//1))\n",
    "        self.training = data[~data.index.isin(self.test.index)]\n",
    "    \n",
    "    def compute_performance(self, predictions):\n",
    "        cutoff = self.threshold\n",
    "        positive_predictions = predictions.query(\"probability > @cutoff\")[\"curtailment_event\"].value_counts()\n",
    "        negative_predictions = predictions.query(\"probability <= @cutoff\")[\"curtailment_event\"].value_counts()\n",
    "\n",
    "        true_positives = positive_predictions.loc[True]\n",
    "        false_positives = positive_predictions.loc[False]\n",
    "\n",
    "        true_negatives = negative_predictions.loc[False]\n",
    "        false_negatives = negative_predictions[True]\n",
    "\n",
    "        accuracy = (true_positives+true_negatives)/len(predictions)\n",
    "        precision = true_positives / (true_positives + false_positives)\n",
    "        \n",
    "        self.performance = {\n",
    "            \"true_positives\": true_positives,\n",
    "            \"false_positives\": false_positives,\n",
    "            \"true_negatives\": true_negatives,\n",
    "            \"false_negatives\": false_negatives,\n",
    "            \"accuracy\": accuracy, \n",
    "            \"precision\": precision\n",
    "        }\n",
    "        \n",
    "    def run(self):\n",
    "        \"\"\"\n",
    "        \"\"\"\n",
    "        result = smf.glm(\n",
    "            self.formula,\n",
    "            self.training,\n",
    "            family=sm.families.Binomial()\n",
    "        ).fit()\n",
    "        self.result = result\n",
    "\n",
    "        # De-label our test data\n",
    "        predictions = result.predict(\n",
    "            self.test.drop(columns=[\"curtailment_event\"])\n",
    "        )\n",
    "        predictions.name = \"probability\"\n",
    "        \n",
    "        # We are predicting probability of False because patsy reverses categorical designations\n",
    "        predictions = 1 - predictions\n",
    "        \n",
    "        # Validate our test data back to our predictions\n",
    "        predictions = self.test.merge(predictions, left_index=True, right_index=True)\n",
    "        \n",
    "        self.predictions = predictions\n",
    "        self.compute_performance(predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'true_positives': 2,\n",
       " 'false_positives': 1,\n",
       " 'true_negatives': 51,\n",
       " 'false_negatives': 18,\n",
       " 'accuracy': 0.7361111111111112,\n",
       " 'precision': 0.6666666666666666}"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_run = ModelRun(\n",
    "    \"C(curtailment_event) ~ C(timestamp.dt.month) + C(is_weekday) + load + t + dswrf\",\n",
    "    data,\n",
    "    0.8\n",
    ")\n",
    "model_run.run()\n",
    "model_run.performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "carecur",
   "language": "python",
   "name": "carecur"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
